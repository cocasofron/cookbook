package ro.cookbook.util;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfWriter;
import org.springframework.stereotype.Component;
import ro.cookbook.domain.Recipe;
import ro.cookbook.domain.User;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Objects;

import static ro.cookbook.util.Utils.IMAGES_ROOT_PATH;

@Component
public class PdfExportHelper {

    private static Font TITLE_FONT = new Font(Font.FontFamily.HELVETICA, 18,
            Font.BOLD, BaseColor.GRAY.brighter());
    private static Font LABEL_FONT = new Font(Font.FontFamily.HELVETICA, 14,
            Font.BOLD, BaseColor.DARK_GRAY);


    public ByteArrayInputStream createPdf(Recipe recipe, User user) {
        Document document = new Document();
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try {
            PdfWriter.getInstance(document, out);
            document.open();
            addLogo(document);
            addTitle(document, recipe, user);
            addRecipeDetails(document, recipe);
            addImage(document, recipe);
            document.close();
        } catch (DocumentException | IOException e) {
            e.printStackTrace();
        }
        return new ByteArrayInputStream(out.toByteArray());
    }

    private String getCurrentDate() {
        return new SimpleDateFormat("dd/MM/yyyy").format(Calendar.getInstance().getTime());
    }

    private void addTitle(Document document, Recipe recipe, User user) throws DocumentException {
        if (!Objects.isNull(user)) {
            document.add(new Paragraph("Recipe generated by " + user.getFirstName()
                    + " from www.cookbook.ro" + " on: " +
                    getCurrentDate()));
        } else {
            document.add(new Paragraph("Recipe generated from www.cookbook.ro" + " on: " +
                    getCurrentDate()));
        }
        Paragraph title = new Paragraph();
        addEmptyLine(title, 1);
        title.add(new Paragraph(recipe.getRecipeName(), TITLE_FONT));
        addEmptyLine(title, 1);
        document.add(title);
    }

    private void addRecipeDetails(Document document, Recipe recipe) throws DocumentException {
        Paragraph details = new Paragraph();
        details.add(new Paragraph("Ingredients: ", LABEL_FONT));
        recipe.getIngredients().forEach(ingredient -> {
            details.add(new Paragraph(ingredient.getIngredient() + ": " + ingredient.getQuantity()));
        });
        addEmptyLine(details, 1);
        details.add(new Paragraph("How to do it: ", LABEL_FONT));
        details.add(new Paragraph(recipe.getCookingMethod()));
        addEmptyLine(details, 1);
        details.add(new Paragraph("Category: ", LABEL_FONT));
        details.add(new Paragraph(recipe.getTags()));
        addEmptyLine(details, 1);
        details.add(new Paragraph("Added by user: " + recipe.getAddedBy()));
        addEmptyLine(details, 2);
        document.add(details);
    }

    private void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }

    private void addImage(Document document, Recipe recipe) throws IOException, DocumentException {
        String imageLocation = Paths.get(IMAGES_ROOT_PATH + recipe.getId() + ".jpg").toString();
        Image image = Image.getInstance(imageLocation);
        image.scaleAbsolute(200, 250);
        document.add(image);
    }

    private void addLogo(Document document) throws IOException, DocumentException {
        String logoLocation = Paths.get(IMAGES_ROOT_PATH + "logo.jpg").toString();
        Image logo = Image.getInstance(logoLocation);
        logo.scaleAbsolute(100, 20);
        document.add(logo);
    }
}
